-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/Language/Turtle/Frontend/Parser.y
-----------------------------------------------------------------------------


terminal eof is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_program -> Program                          (0)
	Program -> Statements                              (1)
	Block -> indent StatementsNonEmpty unindent        (2)
	BlockOrSingleStatement -> Block                    (3)
	BlockOrSingleStatement -> Statement                (4)
	Statements -> Statement                            (5)
	Statements -> Statement newline Statements         (6)
	StatementsNonEmpty -> Statement                    (7)
	StatementsNonEmpty -> Statement newline StatementsNonEmpty   (8)
	Statement -> Identifier '=' Expression             (9)
	Statement -> if Expression ':' BlockOrSingleStatement else ':' BlockOrSingleStatement   (10)
	Statement -> Expression                            (11)
	Expression -> num                                  (12)
	Expression -> Identifier                           (13)
	Expression -> '(' Expression ')'                   (14)
	Expression -> '[' comma_separated__Expression__ ']'   (15)
	Identifier -> id                                   (16)
	comma_separated__Expression__ -> Expression ',' comma_separated__Expression__   (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	id             { Ranged { value = Identifier _ } }
	num            { Ranged { value = TNumber num } }
	'='            { Ranged { value = TAssign } }
	':'            { Ranged { value = TColon } }
	','            { Ranged { value = TComma } }
	'('            { Ranged { value = TParenL } }
	')'            { Ranged { value = TParenR } }
	'['            { Ranged { value = TBracketL } }
	']'            { Ranged { value = TBracketR } }
	if             { Ranged { value = TIf } }
	else           { Ranged { value = TElse } }
	eof            { Ranged { value = EOF } }
	indent         { Ranged { value = TIndent _ } }
	unindent       { Ranged { value = TUnindent } }
	newline        { Ranged { value = TNewline } }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_program  rule  0
	Program         rule  1
	Block           rule  2
	BlockOrSingleStatement rules 3, 4
	Statements      rules 5, 6
	StatementsNonEmpty rules 7, 8
	Statement       rules 9, 10, 11
	Expression      rules 12, 13, 14, 15
	Identifier      rule  16
	comma_separated__Expression__ rule  17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_program -> . Program                         (rule 0)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	if             shift, and enter state 10

	Program        goto state 11
	Statements     goto state 2
	Statement      goto state 3
	Expression     goto state 4
	Identifier     goto state 5

State 1

	Program -> . Statements                             (rule 1)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	if             shift, and enter state 10

	Statements     goto state 2
	Statement      goto state 3
	Expression     goto state 4
	Identifier     goto state 5

State 2

	Program -> Statements .                             (rule 1)

	%eof           reduce using rule 1


State 3

	Statements -> Statement .                           (rule 5)
	Statements -> Statement . newline Statements        (rule 6)

	newline        shift, and enter state 18
	%eof           reduce using rule 5


State 4

	Statement -> Expression .                           (rule 11)

	else           reduce using rule 11
	unindent       reduce using rule 11
	newline        reduce using rule 11
	%eof           reduce using rule 11


State 5

	Statement -> Identifier . '=' Expression            (rule 9)
	Expression -> Identifier .                          (rule 13)

	'='            shift, and enter state 17
	else           reduce using rule 13
	unindent       reduce using rule 13
	newline        reduce using rule 13
	%eof           reduce using rule 13


State 6

	Identifier -> id .                                  (rule 16)

	'='            reduce using rule 16
	':'            reduce using rule 16
	','            reduce using rule 16
	')'            reduce using rule 16
	else           reduce using rule 16
	unindent       reduce using rule 16
	newline        reduce using rule 16
	%eof           reduce using rule 16


State 7

	Expression -> num .                                 (rule 12)

	':'            reduce using rule 12
	','            reduce using rule 12
	')'            reduce using rule 12
	else           reduce using rule 12
	unindent       reduce using rule 12
	newline        reduce using rule 12
	%eof           reduce using rule 12


State 8

	Expression -> '(' . Expression ')'                  (rule 14)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9

	Expression     goto state 16
	Identifier     goto state 13

State 9

	Expression -> '[' . comma_separated__Expression__ ']'    (rule 15)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9

	Expression     goto state 14
	Identifier     goto state 13
	comma_separated__Expression__goto state 15

State 10

	Statement -> if . Expression ':' BlockOrSingleStatement else ':' BlockOrSingleStatement    (rule 10)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9

	Expression     goto state 12
	Identifier     goto state 13

State 11

	%start_program -> Program .                         (rule 0)

	%eof           accept


State 12

	Statement -> if Expression . ':' BlockOrSingleStatement else ':' BlockOrSingleStatement    (rule 10)

	':'            shift, and enter state 24


State 13

	Expression -> Identifier .                          (rule 13)

	':'            reduce using rule 13
	','            reduce using rule 13
	')'            reduce using rule 13
	else           reduce using rule 13
	unindent       reduce using rule 13
	newline        reduce using rule 13
	%eof           reduce using rule 13


State 14

	comma_separated__Expression__ -> Expression . ',' comma_separated__Expression__    (rule 17)

	','            shift, and enter state 23


State 15

	Expression -> '[' comma_separated__Expression__ . ']'    (rule 15)

	']'            shift, and enter state 22


State 16

	Expression -> '(' Expression . ')'                  (rule 14)

	')'            shift, and enter state 21


State 17

	Statement -> Identifier '=' . Expression            (rule 9)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9

	Expression     goto state 20
	Identifier     goto state 13

State 18

	Statements -> Statement newline . Statements        (rule 6)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	if             shift, and enter state 10

	Statements     goto state 19
	Statement      goto state 3
	Expression     goto state 4
	Identifier     goto state 5

State 19

	Statements -> Statement newline Statements .        (rule 6)

	%eof           reduce using rule 6


State 20

	Statement -> Identifier '=' Expression .            (rule 9)

	else           reduce using rule 9
	unindent       reduce using rule 9
	newline        reduce using rule 9
	%eof           reduce using rule 9


State 21

	Expression -> '(' Expression ')' .                  (rule 14)

	':'            reduce using rule 14
	','            reduce using rule 14
	')'            reduce using rule 14
	else           reduce using rule 14
	unindent       reduce using rule 14
	newline        reduce using rule 14
	%eof           reduce using rule 14


State 22

	Expression -> '[' comma_separated__Expression__ ']' .    (rule 15)

	':'            reduce using rule 15
	','            reduce using rule 15
	')'            reduce using rule 15
	else           reduce using rule 15
	unindent       reduce using rule 15
	newline        reduce using rule 15
	%eof           reduce using rule 15


State 23

	comma_separated__Expression__ -> Expression ',' . comma_separated__Expression__    (rule 17)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9

	Expression     goto state 14
	Identifier     goto state 13
	comma_separated__Expression__goto state 29

State 24

	Statement -> if Expression ':' . BlockOrSingleStatement else ':' BlockOrSingleStatement    (rule 10)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	if             shift, and enter state 10
	indent         shift, and enter state 28

	Block          goto state 25
	BlockOrSingleStatementgoto state 26
	Statement      goto state 27
	Expression     goto state 4
	Identifier     goto state 5

State 25

	BlockOrSingleStatement -> Block .                   (rule 3)

	else           reduce using rule 3
	unindent       reduce using rule 3
	newline        reduce using rule 3
	%eof           reduce using rule 3


State 26

	Statement -> if Expression ':' BlockOrSingleStatement . else ':' BlockOrSingleStatement    (rule 10)

	else           shift, and enter state 32


State 27

	BlockOrSingleStatement -> Statement .               (rule 4)

	else           reduce using rule 4
	unindent       reduce using rule 4
	newline        reduce using rule 4
	%eof           reduce using rule 4


State 28

	Block -> indent . StatementsNonEmpty unindent       (rule 2)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	if             shift, and enter state 10

	StatementsNonEmptygoto state 30
	Statement      goto state 31
	Expression     goto state 4
	Identifier     goto state 5

State 29

	comma_separated__Expression__ -> Expression ',' comma_separated__Expression__ .    (rule 17)

	']'            reduce using rule 17


State 30

	Block -> indent StatementsNonEmpty . unindent       (rule 2)

	unindent       shift, and enter state 35


State 31

	StatementsNonEmpty -> Statement .                   (rule 7)
	StatementsNonEmpty -> Statement . newline StatementsNonEmpty    (rule 8)

	unindent       reduce using rule 7
	newline        shift, and enter state 34


State 32

	Statement -> if Expression ':' BlockOrSingleStatement else . ':' BlockOrSingleStatement    (rule 10)

	':'            shift, and enter state 33


State 33

	Statement -> if Expression ':' BlockOrSingleStatement else ':' . BlockOrSingleStatement    (rule 10)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	if             shift, and enter state 10
	indent         shift, and enter state 28

	Block          goto state 25
	BlockOrSingleStatementgoto state 37
	Statement      goto state 27
	Expression     goto state 4
	Identifier     goto state 5

State 34

	StatementsNonEmpty -> Statement newline . StatementsNonEmpty    (rule 8)

	id             shift, and enter state 6
	num            shift, and enter state 7
	'('            shift, and enter state 8
	'['            shift, and enter state 9
	if             shift, and enter state 10

	StatementsNonEmptygoto state 36
	Statement      goto state 31
	Expression     goto state 4
	Identifier     goto state 5

State 35

	Block -> indent StatementsNonEmpty unindent .       (rule 2)

	else           reduce using rule 2
	unindent       reduce using rule 2
	newline        reduce using rule 2
	%eof           reduce using rule 2


State 36

	StatementsNonEmpty -> Statement newline StatementsNonEmpty .    (rule 8)

	unindent       reduce using rule 8


State 37

	Statement -> if Expression ':' BlockOrSingleStatement else ':' BlockOrSingleStatement .    (rule 10)

	else           reduce using rule 10
	unindent       reduce using rule 10
	newline        reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 15
Number of non-terminals: 10
Number of states: 38
